Landing:
    Given: 
       height > 0
    When: 
        distance_target <=5
    Then:
        landing -> {
            height = 0
            distance_target <=5       
        }
;
FlightToDestination_ES:
    Given:
        battery_level >= 80
        package_secured == True
        weather_clear == True
    When:
        gps_destination_received == True
    Then:
        fly_to_destination -> {
            drone_position == gps_destination
            battery_level >= 50
        }
;
DeliverPackage_ES:
    Given:
       battery_level >= 50
        package_secured == True
        weather_clear == True
    When:
        drone_position == gps_destination
    Then:
        deliver_package -> {
            package_delivered == True
            battery_level >= 40
        }
;
ReturnToBase_ES:
    Given:
        battery_level >= 40
        package_delivered == True
        weather_clear == True
    When:
        gps_destination_received == True
    Then:
        return_to_base -> {
            drone_position == base_location
            battery_level >= 10
        }
;
DeliverPackage_US:
    Given:
        battery_level >= 50
        package_secured == True
        weather_clear == True
        delivery_zone_obstructed == True
    When:
        drone_position == gps_destination
    Then:
        deliver_package -> {
            package_delivered == False
            battery_level >= 40
        }
;
MountainRescueObstacleAdaptation_SS:
    Given:
       height > 1000
       weather == clear
       sensors_active == true
    When:
       victim_detected == true
       obstacle_detected == true
       dt <= 2
    Then:
       navigate_around_obstacle -> {
           height == 0
           dt <= 2
           victim_rescued == true
           obstacle_avoided == true
       }
;
DeliverPackageWithZoneObstructed_SS:
    Given:
       battery_level >= 50
        package_secured == True
        weather_clear == True
    When:
        drone_position == gps_destination
    Then:
        activate_wait_mode_30_secs -> {
            wait_condition_evaluated == True
            battery_level >= 40
            package_delivered == True
        }
;
DeliverPackageWithLIDAR_SS:
    Given:
        battery_level >= 50
        package_secured == True
        weather_clear == True
        delivery_zone_obstructed == True
    When:
        drone_position == gps_destination
    Then:
        scan_for_alternative_landing_sites -> {
            alternative_site_found == True
            battery_level >= 40
            package_delivered == True
        }
;
AdaptivePayloadRelease_SS:
    Given:
        battery_level >= 50
        package_secured == True
        weather_clear == True
        landing_surface_unstable == True
    When:
        drone_position == gps_destination
    Then:
        adjust_release_mechanism -> {
            release_adjusted_for_stability == True
            battery_level >= 30
            package_delivered == True
        }
;
PowerLineInspection:
Given:
   height > 10
   battery_level >= 40%
   near_power_line == True
When:
   weather_clear == True
Then:
   inspect_lines -> {
       found_obstacle == True
       obstacle_type == "vegetation"
   }
   clear_path -> {
       vegetation_cleared == True
       inspection_completed == True
   }
;
DisasterReliefSupplyDrop:
Given:
    height > 0
    battery_level >= 30%
    in_disaster_zone == True
When:
    recipient_location_confirmed
Then:
    deliver_supplies -> {
        obstacle_detected == True
        obstacle_type == "debris"
    }
    navigate_obstacle -> {
        debris_cleared == True
        supplies_delivered == True
    }
;
Pre-clearance_Maneuver_BEFORE:
Given:
   height > 0
   battery_level >= 30%
   unexpected_obstacle == True
When:
   dt <= 5
Then:
   clear_obstacle -> {
       obstacle_cleared == True
   }
   landing -> {
       height = 0
       dt <= 5
   }
;
Integrated_Evasion_Landing_AROUND:
Given:
   height > 0
   battery_level >= 30%
   unexpected_obstacle == True
When:
   dt <= 5
Then:
   evasion_landing -> {
       obst = 0
       height = 0
       dt <= 5
   }
;
Post-Landing-Adjustment-after:
Given:
   height != 0
   unexpected_obstacle == True
   battery_level >= 30%
When:
   dt <= 5
Then:
   adjust_landing -> {
       remove_obstacle -> {
           obstacle_cleared == True
       }
       confirm_landing -> {
           height = 0
           dt <= 5
       }
        height = 0
        dt <= 5
        obstacle_cleared == True
   }
