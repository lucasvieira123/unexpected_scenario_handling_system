[
  {
    "lidar": {
      "Given": "height > 0 AND obstacle == 1",
      "When": "distance_target <= 5",
      "Do": "around_obstacle",
      "Then": "height == 0 AND distance_target <= 50"
    }
  },
  {
    "neighbor": {
      "Given": "height > 0 AND obstacle == 1",
      "When": "distance_target <= 5",
      "Do": "landInNeighbor",
      "Then": "height == 0 AND distance_target <= 50"
    }
  },
  {
    "parachute": {
      "Given": "height > 0 AND wind_speed <= 10",
      "When": "distance_target <= 5",
      "Do": "land_package_with_parachute",
      "Then": "height != 0 AND distance_target <= 30"
    }
  },
  {
    "airdrop": {
      "Given": "height > 0 AND wind_speed <= 30",
      "When": "distance_target <= 5",
      "Do": "land_package",
      "Then": "height != 0 AND distance_target <= 10"
    }
  },
  {
    "emergency_landing": {
      "Given": "height > 0 AND battery < 10",
      "When": "distance_target > 50",
      "Do": "land_emergency",
      "Then": "height == 0 AND battery == 0"
    }
  },
  {
    "weather_avoidance": {
      "Given": "height > 30 AND is_storm == 1",
      "When": "distance_target <= 20",
      "Do": "hold_position",
      "Then": "height > 0 AND distance_target > 20"
    }
  },
  {
    "re_route": {
      "Given": "height > 0 AND obstacle == 1",
      "When": "distance_target > 10",
      "Do": "reroute_around",
      "Then": "height > 0 AND distance_target > 10"
    }
  },
  {
    "high_altitude_drop": {
      "Given": "height < 50",
      "When": "distance_target <= 10",
      "Do": "drop_package_high_altitude",
      "Then": "height > 0 AND distance_target <= 10"
    }
  },
  {
    "night_delivery": {
      "Given": "height > 0 AND is_night  == 1",
      "When": "distance_target <= 10",
      "Do": "use_night_lights",
      "Then": "height == 0 AND distance_target <= 10 AND lights == 1"
    }
  },
  {
    "collision_avoidance": {
      "Given": "height > 10",
      "When": "obstacle == 1",
      "Do": "adjust_course",
      "Then": "height > 0 AND obstacle == 0"
    }
  },
  {
    "obstacle_Avoidance_Landing": {
      "Given": "height > 0 AND obstacle != 0",
      "When": "distance_target <= 1",
      "Do": "ascend_to_safe_altitude AND retry_landing",
      "Then": "height == 0 AND distance_target <= 5"
    }
  },
  {
    "battery_Critical_Landing": {
      "Given": "height > 0 AND voltage_low == 1",
      "When": "distance_target <= 5",
      "Do": "reduce_power_consumption AND initiate_emergency_landing",
      "Then": "height == 0 AND distance_target == 0"
    }
  },
  {
    "landing_With_Visual_Instability": {
      "Given": "height > 0 AND image_stabilization_failure == 1",
      "When": "distance_target <= 30",
      "Do": "use_lidar_and_ultrasonic_sensors_for_landing",
      "Then": "height == 5 AND distance_target <= 10"
    }
  },
  {
    "impeded_Infrastructure_Delivery": {
      "Given": "height > 0 AND obstructed_infrastructure == 1",
      "When": "distance_target <= 5",
      "Do": "deliver_to_alternative_location OR notify_recipient_for_manual_pickup OR retry_delivery_later",
      "Then": "height == 0"
    }
  },
  {
    "high_Density_Landing": {
      "Given": "height > 0 AND is_crowd == 1",
      "When": "distance_target <= 5",
      "Do": "notify_authorities_and_retry_landing_later",
      "Then": "height > 0 AND distance_target < 50"
    }
  },
  {
    "foggy_Conditions_Landing": {
      "Given": "height > 0 AND visibility < 20",
      "When": "distance_target == 0",
      "Do": "use_thermal_imaging_for_safe_landing",
      "Then": "height == 0"
    }
  },
  {
    "dynamic_Target_Landing": {
      "Given": "height > 0 AND target_moving == 1",
      "When": "distance_target <= 5",
      "Do": "synchronize_with_target_movement_and_land",
      "Then": "height == 0 AND distance_target <= 100"
    }
  },
  {
    "landing_With_Animal_Activity": {
      "Given": "height > 0 AND person_detected == 1",
      "When": "distance_target <= 3",
      "Do": "drop",
      "Then": "height == 7 AND distance_target <= 5"
    }
  }
]